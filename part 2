#include <stdio.h>
#include <stdlib.h>
#include <sys/types.h>
#include <sys/ipc.h>
#include <sys/shm.h>
#include <unistd.h>
#include <sys/wait.h>
#include <time.h>

void ParentProcess(int *);
void ChildProcess(int *);

int main()
{
    int ShmID;
    int *ShmPTR;
    pid_t pid;
    int status;

    ShmID = shmget(IPC_PRIVATE, 2 * sizeof(int), IPC_CREAT | 0666);
    if (ShmID < 0)
    {
        printf("*** shmget error (server) ***\n");
        exit(1);
    }

    printf("Server has received a shared memory of two integers...\n");

    ShmPTR = (int *)shmat(ShmID, NULL, 0);
    if (*ShmPTR == -1)
    {
        printf("*** shmat error (server) ***\n");
        exit(1);
    }

    printf("Server has attached the shared memory...\n");

    // Initialize BankAccount and Turn
    ShmPTR[0] = 0; // BankAccount
    ShmPTR[1] = 0; // Turn

    printf("Initial Bank Account: $%d\n", ShmPTR[0]);

    pid = fork();

    if (pid < 0)
    {
        printf("*** fork error (server) ***\n");
        exit(1);
    }
    else if (pid == 0)
    {
        ChildProcess(ShmPTR);
        exit(0);
    }
    else
    {
        ParentProcess(ShmPTR);
        wait(&status);
        printf("Server has detected the completion of its child...\n");

        shmdt((void *)ShmPTR);
        printf("Server has detached its shared memory...\n");

        shmctl(ShmID, IPC_RMID, NULL);
        printf("Server has removed its shared memory...\n");

        printf("Server exits...\n");
        exit(0);
    }
}

void ParentProcess(int *ShmPTR)
{
    srand(time(NULL));

    for (int i = 0; i < 25; i++)
    {
        sleep(rand() % 6);

        int account = ShmPTR[0];

        while (ShmPTR[1] != 0)
            ; // Busy wait until Turn is 0

        if (account <= 100)
        {
            int balance = rand() % 101;

            if (balance % 2 == 0)
            {
                ShmPTR[0] += balance;
                printf("Dear old Dad: Deposits $%d / Balance = $%d\n", balance, ShmPTR[0]);
            }
            else
            {
                printf("Dear old Dad: Doesn't have any money to give\n");
            }

            ShmPTR[1] = 1;
        }
        else
        {
            printf("Dear old Dad: Thinks Student has enough Cash ($%d)\n", account);
        }
    }
}

void ChildProcess(int *ShmPTR)
{
    srand(time(NULL));

    for (int i = 0; i < 25; i++)
    {
        sleep(rand() % 6);

        int account = ShmPTR[0];

        while (ShmPTR[1] != 1)
            ; // Busy wait until Turn is 1

        int balance = rand() % 51;

        printf("Poor Student needs $%d\n", balance);

        if (balance <= account)
        {
            ShmPTR[0] -= balance;
            printf("Poor Student: Withdraws $%d / Balance = $%d\n", balance, ShmPTR[0]);
        }
        else
        {
            printf("Poor Student: Not Enough Cash ($%d)\n", account);
        }

        ShmPTR[1] = 0;
    }
}
